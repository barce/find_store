#!/usr/bin/env python
import argparse
import googlemaps
import os
import json

from datetime import datetime
from find_store_lib import *

# print the matching store address, as well as
# the distance to that store. (in json or text)

# Usage:
#   find_store --address="<address>"
#   find_store --address="<address>" [--units=(mi|km)] [--output=text|json]
#   find_store --zip=<zip>
#   find_store --zip=<zip> [--units=(mi|km)] [--output=text|json]
# 
# Options:
#   --zip=<zip>          Find nearest store to this zip code. If there are multiple best-matches, return the first.
#   --address            Find nearest store to this address. If there are multiple best-matches, return the first.
#   --units=(mi|km)      Display units in miles or kilometers [default: mi]
#   --output=(text|json) Output in human-readable text, or in JSON (e.g. machine-readable) [default: text]
# 
# Example
#   find_store --address="1770 Union St, San Francisco, CA 94123"
#   find_store --zip=94115 --units=km

parser = argparse.ArgumentParser()
parser.add_argument("--address", help="address", dest="address")
parser.add_argument("--units", help="mi|km", dest="units")
parser.add_argument("--output", help="text|json", dest="output")

args = parser.parse_args()

closest = find_store(args.address)

address = "{0}, {1}, {2} {3}".format(closest[0],closest[1],closest[2],closest[3])
distance = closest[4]
output = None
units = None

# treat address as zipcode
if args.zip != None:
  address = args.zip

if args.units == None:
  units = 'mi'

if units == 'mi':
  distance = distance * 0.621371

result = "Address: {0}\nDistance: {1}".format(address,distance)
if args.output == None:
  output = 'text'

if output == 'text':
  print(result)

if args.output == 'json':
  print(json.dumps({'address':address, 'distance':distance}))

